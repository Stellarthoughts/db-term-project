// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  login      String   @unique
  password   String
  access     Access   @relation(fields: [accessId], references: [id])
  accessId   Int      @unique
  progress   Progress @relation(fields: [progressId], references: [id])
  progressId Int      @unique
}

model Progress {
  id         Int   @id @default(autoincrement())
  lastPage   Page? @relation(fields: [lastPageId], references: [id])
  lastPageId Int?
  User       User?
}

model Access {
  id        Int     @id @default(autoincrement())
  canView   Boolean @default(true)
  canEdit   Boolean @default(false)
  canCreate Boolean @default(false)
  canDelete Boolean @default(false)
  User      User?
}

model Entry {
  id             Int       @id @default(autoincrement())
  name           String
  personalPage   Page?     @relation(fields: [personalPageId], references: [id])
  personalPageId Int?
  chapters       Chapter[]
}

model Chapter {
  id             Int    @id @default(autoincrement())
  order          Int    @default(autoincrement())
  name           String
  personalPage   Page?  @relation(name: "chapterPersonalPage", fields: [personalPageId], references: [id])
  personalPageId Int?
  entry          Entry  @relation(references: [id], fields: [entryId], onDelete: Cascade)
  entryId        Int
  pages          Page[] @relation(name: "chapterToPage")
}

model Page {
  id                   Int        @id @default(autoincrement())
  order                Int        @default(autoincrement())
  progressLastPage     Progress[]
  entryPersonalPages   Entry[]
  chapterPersonalPages Chapter[]  @relation(name: "chapterPersonalPage")
  chapter              Chapter?   @relation(name: "chapterToPage", references: [id], fields: [chapterId], onDelete: Cascade)
  chapterId            Int?
  threads              Thread[]   @relation(name: "pageToThread")
}

enum ThreadType {
  TEXT
  AUDIO
  IMAGE
  VIDEO
}

model Thread {
  id      Int        @id @default(autoincrement())
  order   Int        @default(autoincrement())
  type    ThreadType
  content String
  Page    Page       @relation(name: "pageToThread", references: [id], fields: [pageId], onDelete: Cascade)
  pageId  Int
}
